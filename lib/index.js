// Generated by CoffeeScript 1.10.0
(function() {
  var NodeCache, app, bunyan, config, default_image_path, express, fs, image_response, info_cache, info_cache_checkperiod, info_cache_ttl, info_json_path, info_json_response, log, log_file_path, path, port, resolve_source_image_path, viewer_path, warm_cache, warm_path;

  express = require('express');

  app = express();

  path = require('path');

  fs = require('fs');

  config = require('config');


  /*
  Logging
  Currently we have one logger that logs to stdout and to a file in the log
  directory.
   */

  bunyan = require('bunyan');


  /*
  In order to have environment specific log files you will need to set NODE_ENV
  in your environment. You can see examples of how this is done in the scripts
  in package.json.
   */

  log_file_path = path.join(__dirname, "../log/iiif-" + process.env.NODE_ENV + ".log");

  log = bunyan.createLogger({
    name: 'iiif',
    streams: [
      {
        level: 'debug',
        stream: process.stdout
      }, {
        level: 'debug',
        path: log_file_path
      }
    ]
  });


  /*
  Caching
  We'll create two different memory caches. One will keep image information
  for the life of the process and the other will be to cache images to the file
  system for a specified amount of time.
   */

  NodeCache = require('node-cache');


  /*
  We cache the image information since getting the information from the cache will
  be faster than using a child process to return the information. This is
  completely in memory of the node instance so does not persist across instances
  or restarts.
   */

  info_cache_ttl = config.get('cache.info.ttl');

  info_cache_checkperiod = config.get('cache.info.checkperiod');

  log.info({
    ttl: info_cache_ttl,
    checkperiod: info_cache_checkperiod
  }, 'info_cache settings');

  info_cache = new NodeCache({
    stdTTL: info_cache_ttl,
    checkperiod: info_cache_checkperiod

    /*
    Exports
     */
  });

  exports.log = log;

  exports.info_cache = info_cache;


  /*
  Image server specific functions.
  Note that the order of the code here is important!
  These local modules must be required _after_ the Exports section of this code
  so that they are available when we need them in these modules. Otherwise
  log etc. will be undefined within the modules.
   */

  info_json_response = require('./info-json-response');

  image_response = require('./image-response');

  resolve_source_image_path = require('./resolver').resolve_source_image_path;

  warm_cache = require('./warm-cache');


  /*
  Static assets in this case means cached image files when the
  config.cache.base_path value is 'public'. Otherwise the image server
  has no need for serving up static assets. The
   */

  if (config.get('cache.base_path') === 'public') {
    log.info('Use Express to serve static assets');
    app.use(express["static"]('public'));
  }

  if (config.get('viewer')) {
    app.get('*/openseadragon.js', function(req, res) {
      var osdjs;
      osdjs = path.join(__dirname, '/../node_modules/openseadragon/build/openseadragon/openseadragon.js');
      return res.sendFile(osdjs);
    });
    app.get('*/openseadragon/images/:image', function(req, res) {
      var osdf;
      osdf = path.join(__dirname, "/../node_modules/openseadragon/build/openseadragon/images/" + req.params.image);
      return res.sendFile(osdf);
    });
    app.get('*/openseadragon-start.js', function(req, res) {
      var osds;
      osds = path.join(__dirname, "/../app/openseadragon-start.js");
      return res.sendFile(osds);
    });
    viewer_path = path.join('/', config.get('prefix'), '/viewer/:id/?$');
    app.get(viewer_path, function(req, res) {
      var source_image_path;
      log.info({
        route: 'viewer',
        url: req.url,
        ip: req.ip
      });
      source_image_path = resolve_source_image_path(req.params.id);
      return fs.stat(source_image_path, function(err, stats) {
        var index;
        if (err) {
          log.info({
            res: '404',
            url: req.url,
            ip: req.ip
          }, '404');
          return res.status(404).send('404');
        } else {
          log.info({
            res: 'viewer',
            url: req.url,
            ip: req.ip
          }, '400');
          index = path.join(__dirname, "/../app/index.html");
          res.setHeader('Content-Type', 'text/html');
          return res.sendFile(index);
        }
      });
    });
  }

  if (config.get('profile')) {
    warm_path = path.join('/', config.get('prefix'), '/warm/:id/?$');
    app.get(warm_path, function(req, res) {
      log.info({
        route: 'warm',
        url: req.url,
        ip: req.ip
      });
      return warm_cache(req, res);
    });
  }

  info_json_path = path.join('/', config.get('prefix'), '/:id/info.json');

  app.get(info_json_path, function(req, res) {
    log.info({
      route: 'info.json',
      url: req.url,
      ip: req.ip
    });
    if (config.get('cors')) {
      res.header("Access-Control-Allow-Origin", config.get('cors'));
    }
    return info_json_response(req, res, info_cache);
  });

  default_image_path = path.join('/', config.get('prefix'), '/:id/:region/:size/:rotation/default.:format(jpg|png)');

  app.get(default_image_path, function(req, res) {
    log.info({
      route: 'image',
      url: req.url,
      ip: req.ip
    });
    return image_response(req, res, info_cache);
  });

  app.get('*', function(req, res) {
    var possible_image_identifier, possible_image_path, url, url_parts;
    log.info({
      route: '*',
      url: req.url,
      ip: req.ip
    });
    url = req.url;
    url_parts = url.split('/');
    possible_image_identifier = url_parts[0];
    possible_image_path = resolve_source_image_path(possible_image_identifier);
    return fs.stat(possible_image_path, function(err, stats) {
      if (err) {
        log.info({
          res: '400',
          url: url,
          ip: req.ip
        }, '400');
        return res.status(400).send('400 not found');
      } else {
        log.info({
          res: '303',
          url: url,
          ip: req.ip
        }, '303');
        return res.redirect('303', "/" + possible_image_identifier + "/info.json");
      }
    });
  });

  if (process.env.NODE_ENV !== 'test') {
    port = process.env.PORT || 3001;
    app.listen(port, function() {
      return console.log("IIIF image server listening on port " + port + "! Visit http://localhost:" + port + "/viewer/trumpler14");
    });
  }

  exports.app = app;

}).call(this);
