// Generated by CoffeeScript 1.10.0
(function() {
  var Extractor, InfoJSONCreator, Informer, NodeCache, Parser, Validator, _, app, express, fs, iiif, image_cache, image_extraction, info_cache, path, resolve_image_path;

  express = require('express');

  app = express();

  _ = require('lodash');

  path = require('path');

  fs = require('fs');

  iiif = require('iiif-image');

  Informer = iiif.Informer;

  Extractor = iiif.Extractor;

  Parser = iiif.ImageRequestParser;

  InfoJSONCreator = iiif.InfoJSONCreator;

  Validator = iiif.Validator;

  image_extraction = require('./image-extraction').image_extraction;

  resolve_image_path = require('./resolver').resolve_image_path;


  /*
  We'll create two different memory caches. One will keep image information
  for the life of the process and the other will be to cache images to the file
  system for a specified amount of time.
   */

  NodeCache = require('node-cache');

  info_cache = new NodeCache();

  image_cache = new NodeCache({
    stdTTL: 86400,
    checkperiod: 3600
  });

  image_cache.on('del', function(key, cached_image_path) {
    console.log("Image deleted: " + key + " " + cached_image_path);
    return fs.unlink(cached_image_path);
  });

  app.get('/index.html', function(req, res) {
    var index;
    index = path.join(__dirname, "/../app/index.html");
    return res.sendFile(index);
  });

  app.get('/openseadragon.js', function(req, res) {
    var osdjs;
    osdjs = path.join(__dirname, '/../node_modules/openseadragon/build/openseadragon/openseadragon.js');
    return res.sendFile(osdjs);
  });

  app.get('/openseadragon/images/:image', function(req, res) {
    var osdf;
    osdf = path.join(__dirname, "/../node_modules/openseadragon/build/openseadragon/images/" + req.params.image);
    return res.sendFile(osdf);
  });

  app.get('/openseadragon-start.js', function(req, res) {
    var osds;
    osds = path.join(__dirname, "/../app/openseadragon-start.js");
    return res.sendFile(osds);
  });

  app.get('*info.json', function(req, res) {
    var cache_info, id, image_path, info_cb, informer, scheme, server_info, url, url_parts;
    url = req.url;
    url_parts = url.split('/');
    id = url_parts[url_parts.length - 2];
    image_path = resolve_image_path(id);
    scheme = req.connection.encrypted != null ? 'https' : 'http';
    server_info = {
      id: scheme + "://" + req.headers.host + "/" + id,
      level: 1
    };
    info_cb = function(info) {
      var info_json_creator;
      if (!info_cache.get(id)) {
        info_cache.set(id, info);
      }
      info_json_creator = new InfoJSONCreator(info, server_info);
      return res.send(info_json_creator.info_json);
    };
    cache_info = info_cache.get(id);
    if (cache_info) {
      return info_cb(_.cloneDeep(cache_info));
    } else {
      informer = new Informer(image_path, info_cb);
      return informer.inform();
    }
  });

  app.get('*.(jpg|png)', function(req, res) {
    var cache_image_path, params, parser, url, validator;
    url = req.url;
    parser = new Parser(url);
    params = parser.parse();
    cache_image_path = image_cache.get(url);
    if (cache_image_path) {
      return fs.stat(cache_image_path, function(err, stats) {
        if (err) {
          image_cache.del(url);
          return image_extraction(res, url, params, info_cache, image_cache);
        } else {
          return res.sendFile(cache_image_path);
        }
      });
    } else {

      /*
      We do a quick check whether the parameters of the request are valid
      before trying the extraction. The check here is not able to check
      whether the request is completely valid because we do not have the image
      information yet.
      TODO: In cases where we do have the image information from the
      info_cache we could do a fuller validation of the request (does it result in
      a 0 pixel image? Is the request out of bounds of the image?).
       */
      validator = new Validator(params);
      if (validator.valid_params()) {
        return image_extraction(res, url, params, info_cache, image_cache);
      } else {
        return res.status(400).send('400 error');
      }
    }
  });

  app.get('*', function(req, res) {
    return res.status(404).send('404 not found');
  });

  app.listen(3000, function() {
    return console.log('Example IIIF image server listening on port 3000! Visit http://localhost:3000/index.html?id=trumpler14');
  });

}).call(this);
