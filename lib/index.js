// Generated by CoffeeScript 1.10.0
(function() {
  var NodeCache, app, checkperiod, config, express, fs, image_cache, image_response, info_cache, info_json_response, path, ttl;

  express = require('express');

  app = express();

  path = require('path');

  fs = require('fs');

  config = require('config');

  info_json_response = require('./info-json-response');

  image_response = require('./image-response');


  /*
  Caching
  We'll create two different memory caches. One will keep image information
  for the life of the process and the other will be to cache images to the file
  system for a specified amount of time.
   */

  NodeCache = require('node-cache');


  /*
  We cache the image information since getting the information from the cache will
  be faster than using a child process to return the information. This is
  completely in memory of the node instance so does not persist across instances
  or restarts.
   */

  info_cache = new NodeCache();


  /*
  The image_cache is really only used for expiration of an image from
  the file system. This works fine for single process applications, but if you
  begin to scale out to multiple processes then you will want to use a shared
  cache like Memcached.
   */

  ttl = config.get('cache.image.ttl');

  checkperiod = config.get('cache.image.checkperiod');

  console.log("Image cache: ttl:" + ttl + " checkperiod:" + checkperiod);

  image_cache = new NodeCache({
    stdTTL: ttl,
    checkperiod: checkperiod
  });

  image_cache.on('del', function(key, cached_image_path) {
    console.log("Image deleted: " + key + " " + cached_image_path);
    return fs.unlink(cached_image_path, function(err) {});
  });

  app.use(express["static"]('public'));

  if (config.get('viewer')) {
    app.get('/viewer/:id/', function(req, res) {
      var index;
      index = path.join(__dirname, "/../app/index.html");
      res.setHeader('Content-Type', 'text/html');
      return res.sendFile(index);
    });
    app.get('/openseadragon.js', function(req, res) {
      var osdjs;
      osdjs = path.join(__dirname, '/../node_modules/openseadragon/build/openseadragon/openseadragon.js');
      return res.sendFile(osdjs);
    });
    app.get('/openseadragon/images/:image', function(req, res) {
      var osdf;
      osdf = path.join(__dirname, "/../node_modules/openseadragon/build/openseadragon/images/" + req.params.image);
      return res.sendFile(osdf);
    });
    app.get('/openseadragon-start.js', function(req, res) {
      var osds;
      osds = path.join(__dirname, "/../app/openseadragon-start.js");
      return res.sendFile(osds);
    });
  }

  app.get('*info.json', function(req, res) {
    return info_json_response(req, res, info_cache);
  });

  app.get('*.:format(jpg|png)', function(req, res) {
    return image_response(req, res, info_cache, image_cache);
  });

  app.get('*', function(req, res) {
    return res.status(404).send('404 not found');
  });

  app.listen(3001, function() {
    return console.log('Example IIIF image server listening on port 3001! Visit http://localhost:3000/viewer/trumpler14');
  });

}).call(this);
