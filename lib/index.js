// Generated by CoffeeScript 1.10.0
(function() {
  var Extractor, InfoJSONCreator, Informer, Parser, _, app, express, iiif, path;

  express = require('express');

  app = express();

  _ = require('lodash');

  path = require('path');

  iiif = require('iiif-image');

  Informer = iiif.IIIFImageInformer;

  Extractor = iiif.IIIFImageExtractor;

  Parser = iiif.IIIFImageRequestParser;

  InfoJSONCreator = iiif.IIIFInfoJSONCreator;

  app.get('/index.html', function(req, res) {
    return res.send('This ought to deliver a pan-zoom viewer or something.');
  });

  app.get('*info.json', function(req, res) {
    var id, image_path, info_cb, informer, scheme, server_info, url, url_parts;
    url = req.url;
    url_parts = url.split('/');
    id = url_parts[url_parts.length - 2];
    image_path = path.join(__dirname, "/../images/" + id + ".jp2");
    scheme = req.connection.encrypted != null ? 'https' : 'http';
    server_info = {
      id: scheme + "://" + req.headers.host + "/" + id,
      level: 1
    };
    info_cb = function(info) {
      var info_json_creator;
      info_json_creator = new InfoJSONCreator(info, server_info);
      return res.send(info_json_creator.info_json);
    };
    informer = new Informer(image_path, info_cb);
    return informer.inform(info_cb);
  });

  app.get('*.(jpg|png)', function(req, res) {
    var extractor_cb, image_path, info_cb, informer, params, parser, url;
    url = req.url;
    parser = new Parser(url);
    params = parser.parse();
    console.log(params);
    image_path = path.join(__dirname, "/../images/" + params.identifier + ".jp2");
    console.log(image_path);
    extractor_cb = function(output_image_path) {
      return res.sendFile(output_image_path);
    };
    info_cb = function(info) {
      var extractor, options;
      options = {
        path: image_path,
        params: params,
        info: info
      };
      extractor = new Extractor(options, extractor_cb);
      return extractor.extract();
    };
    informer = new Informer(image_path, info_cb);
    return informer.inform(info_cb);
  });

  app.get('*', function(req, res) {
    return res.send('This route catches anything else that does not match.');
  });

  app.listen(3000, function() {
    return console.log('Example app listening on port 3000!');
  });

}).call(this);
