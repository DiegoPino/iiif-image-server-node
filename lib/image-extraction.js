// Generated by CoffeeScript 1.10.0
(function() {
  var Extractor, Informer, Validator, _, fs, iiif, image_extraction, path_for_image_temp_file, resolve_image_path, slugify_path, tempfile;

  resolve_image_path = require('./resolver').resolve_image_path;

  _ = require('lodash');

  tempfile = require('tempfile');

  fs = require('fs');

  iiif = require('iiif-image');

  Informer = iiif.InformerJp2Openjpeg;

  Validator = iiif.Validator;

  slugify_path = require('./slugify-path');

  path_for_image_temp_file = require('./path-for-image-temp-file');


  /*
  Choose which extractor you want to use:
  opj => OpenJPEG => opj_decompress
  kdu => Kakadu => kdu_expand
   */

  Extractor = iiif.Extractor('opj');


  /*
  This function needs the response object and the incoming URL to parse the URL,
  get information about the image, extract the requested image, and provide a
  response to the client.
  TODO: is it worth it to break this out when we have to pass so much in?
   */

  image_extraction = function(res, url, params, info_cache, image_cache) {
    var cache_info, extractor_cb, image_path, info_cb, informer;
    image_path = resolve_image_path(params.identifier);
    extractor_cb = function(image) {
      var image_type;
      image_type = params.format === 'png' ? 'image/png' : 'image/jpeg';
      res.setHeader('Content-Type', image_type);
      res.send(image);
      if (!image_cache.get(url)) {
        image_path = path_for_image_temp_file(slugify_path(url));
        return fs.writeFile(image_path, image, function(err) {
          return image_cache.set(url, image_path);
        });
      }
    };

    /*
    Once the informer finishes its work it calls this callback sending it the
    information. Now that we have the info it checks to see if the request
    is valid. If it is valid then the extractor then uses the information to
    try to create the image. If the request is not valid then a 400 error is
    returned.
     */
    info_cb = function(info) {
      var extractor, options, validator;
      if (!info_cache.get(params.identifier)) {
        info_cache.set(params.identifier, info);
      }
      validator = new Validator(params, info);
      if (validator.valid()) {
        options = {
          path: image_path,
          params: params,
          info: info
        };
        extractor = new Extractor(options, extractor_cb);
        return extractor.extract();
      } else {
        return res.status(400).send('400');
      }
    };
    cache_info = info_cache.get(params.identifier);
    if (cache_info) {
      return info_cb(_.cloneDeep(cache_info));
    } else {
      informer = new Informer(image_path, info_cb);
      return informer.inform();
    }
  };

  exports.image_extraction = image_extraction;

}).call(this);
