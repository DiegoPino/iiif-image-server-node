// Generated by CoffeeScript 1.10.0
(function() {
  var InfoJSONCreator, Informer, cache_info_json, config, fs, iiif, info_cache, info_json_response, jp2_binary, log, resolve_source_image_path, retrieve_cached_info_json, server_info;

  fs = require('fs');

  log = require('./index').log;

  config = require('config');

  jp2_binary = config.get('jp2_binary');

  iiif = require('iiif-image');

  InfoJSONCreator = iiif.InfoJSONCreator;

  Informer = iiif.Informer(jp2_binary);

  info_cache = require('./index').info_cache;

  resolve_source_image_path = require('./resolver').resolve_source_image_path;

  retrieve_cached_info_json = require('./caching/retrieve-cached-info-json');

  server_info = require('./server-info');

  cache_info_json = require('./caching/cache-info-json');

  info_json_response = function(req, res) {

    /*
    Information requests are easy to parse, so we just take the next to the
    last element to make our id. Note that this image server does not
    decodeURIComponent as our implementation of a file resolver in
    resolve_source_image_path is not robust enough to defend against a directory
    traversal attack.
     */
    var id, source_image_path, url, url_parts;
    url = req.url;
    url_parts = url.split('/');
    id = url_parts[url_parts.length - 2];
    source_image_path = resolve_source_image_path(id);

    /*
    Check to see if the image exists. If not return a 404. If the image exists
    return the information about the image.
     */
    return fs.stat(source_image_path, function(err, stats) {
      var info_cb;
      if (err) {
        log.info({
          res: '404',
          url: url,
          ip: req.ip
        }, '404');
        return res.status(404).send('404');
      } else {
        info_cb = function(info) {
          var info_json, info_json_creator;
          info_json_creator = new InfoJSONCreator(info, server_info(req, id));
          log.info({
            res: 'info',
            url: url,
            ip: req.ip
          }, 'response info.json');
          info_json = info_json_creator.info_json;
          res.send(info_json);
          info_cache.set(id, info_json);
          log.info({
            cache: 'info',
            op: 'set',
            url: url,
            ip: req.ip
          }, 'info cached');
          return cache_info_json(req, info_json);
        };
        if (req.get('Accept') && req.get('Accept').match(/application\/ld\+json/)) {
          res.set('Content-Type', 'application/ld+json');
        }
        return retrieve_cached_info_json(id, function(info) {
          var informer;
          if (info) {
            log.info({
              cache: 'info',
              found: 'hit',
              url: req.url,
              ip: req.ip
            });
            return res.send(info);
          } else {
            log.info({
              cache: 'info',
              found: 'miss',
              url: req.url,
              ip: req.ip
            });
            informer = new Informer(source_image_path, info_cb);
            return informer.inform();
          }
        });
      }
    });
  };

  module.exports = info_json_response;

}).call(this);
