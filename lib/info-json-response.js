// Generated by CoffeeScript 1.10.0
(function() {
  var InfoJSONCreator, Informer, _, config, fs, iiif, info_cache, info_json_response, jp2_binary, log, mkdirp, path, path_for_cache_file, resolve_image_path;

  fs = require('fs');

  _ = require('lodash');

  path = require('path');

  mkdirp = require('mkdirp');

  log = require('./index').log;

  info_cache = require('./index').info_cache;

  config = require('config');

  jp2_binary = config.get('jp2_binary');

  iiif = require('iiif-image');

  InfoJSONCreator = iiif.InfoJSONCreator;

  Informer = iiif.Informer(jp2_binary);

  resolve_image_path = require('./resolver').resolve_image_path;

  path_for_cache_file = require('./path-for-cache-file');

  info_json_response = function(req, res) {

    /*
    Information requests are easy to parse, so we just take the next to the
    last element to make our id. Note that this image server does not
    decodeURIComponent as our implementation of a file resolver in
    resolve_image_path is not robust enough to defend against a directory
    traversal attack.
     */
    var id, image_path, url, url_parts;
    url = req.url;
    url_parts = url.split('/');
    id = url_parts[url_parts.length - 2];
    image_path = resolve_image_path(id);

    /*
    Check to see if the image exists. If not return a 404. If the image exists
    return the information about the image.
     */
    return fs.stat(image_path, function(err, stats) {
      var cache_info, info_cb, informer, scheme, server_info;
      if (err) {
        log.info({
          res: '404',
          url: url,
          ip: req.ip
        }, '404');
        return res.status(404).send('404');
      } else {
        scheme = req.connection.encrypted != null ? 'https' : 'http';
        server_info = {
          id: scheme + "://" + req.headers.host + "/" + id,
          level: 1
        };
        info_cb = function(info) {
          var info_json, info_json_creator, info_json_dir, info_json_path;
          if (!info_cache.get(id)) {
            info_cache.set(id, info);
            log.info({
              cache: 'info',
              op: 'set',
              url: url,
              ip: req.ip
            }, 'info cached');
          }
          info_json_creator = new InfoJSONCreator(info, server_info);
          if (req.get('Accept') && req.get('Accept').match(/application\/ld\+json/)) {
            res.set('Content-Type', 'application/ld+json');
          }
          log.info({
            res: 'info',
            url: url,
            ip: req.ip
          }, 'response info');
          info_json = info_json_creator.info_json;
          res.send(info_json);
          console.log(info_json);
          info_json_path = path_for_cache_file(url);
          info_json_dir = path.dirname(info_json_path);
          return mkdirp(info_json_dir, function(err) {
            var info_json_file;
            if (!err) {
              info_json_file = JSON.stringify(info_json);
              console.log(info_json_path);
              return fs.writeFile(info_json_path, info_json_file, function(err) {
                if (!err) {
                  return log.info({
                    cache: 'info.json',
                    op: 'write',
                    url: url,
                    ip: req.ip
                  }, 'info.json cached');
                } else {
                  return console.log(err);
                }
              });
            }
          });
        };
        cache_info = info_cache.get(id);
        if (cache_info) {
          log.info({
            cache: 'info',
            found: 'hit',
            url: req.url,
            ip: req.ip
          });
          return info_cb(_.cloneDeep(cache_info));
        } else {
          log.info({
            cache: 'info',
            found: 'miss',
            url: req.url,
            ip: req.ip
          });
          informer = new Informer(image_path, info_cb);
          return informer.inform();
        }
      }
    });
  };

  module.exports = info_json_response;

}).call(this);
