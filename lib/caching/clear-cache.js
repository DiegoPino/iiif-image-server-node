// Generated by CoffeeScript 1.10.0
(function() {
  var _, async, clear_cache_for_id, clear_cache_from_profile, config, fs, log, path, profile_string, profiles, regex, resolve_base_cache_path, rimraf, time_difference_profile_image, time_difference_random_image;

  fs = require('fs');

  path = require('path');

  _ = require('lodash');

  rimraf = require('rimraf');

  async = require('async');

  require('shelljs/global');

  config = require('config');

  resolve_base_cache_path = require('./resolve-base-cache-path');

  log = require('../index').log;

  profiles = _.values(config.get('profile'));

  profile_string = profiles.join('$|') + "$";

  regex = new RegExp(profile_string);

  time_difference_profile_image = config.get('cache.clean.profile_image');

  time_difference_random_image = config.get('cache.clean.random_image');

  clear_cache_for_id = function(id, callback) {
    var base_path_for_id;
    base_path_for_id = path.join(resolve_base_cache_path(), id);
    return rimraf(base_path_for_id, function(err) {
      if (callback != null) {
        return callback(id);
      }
    });
  };

  clear_cache_from_profile = function(id, profile_callback) {
    var base_path_for_id, now;
    now = new Date();
    log.info("DATE: " + now);
    base_path_for_id = path.join(resolve_base_cache_path(), id);
    return fs.stat(base_path_for_id, function(err, stats) {
      var image_files, process_image;
      if (err) {
        return profile_callback();
      } else {
        image_files = find(base_path_for_id).filter(function(file) {
          return file.match(/.*\.(jpg|png)$/);
        });
        process_image = function(image, process_callback) {
          var match;
          match = image.match(regex);
          if (match) {
            return (function(image) {
              return fs.stat(image, function(err, stats) {
                if (now - stats.atime > time_difference_profile_image) {
                  rm(image);
                  log.info({
                    match: true,
                    "delete": true,
                    image: image
                  }, 'match delete');
                } else {
                  log.info({
                    match: true,
                    "delete": false,
                    image: image
                  }, 'match keep');
                }
                return process_callback();
              });
            })(image);
          } else {
            return (function(image) {
              return fs.stat(image, function(err, stats) {
                if (now - stats.atime > time_difference_random_image) {
                  log.info({
                    match: false,
                    "delete": true,
                    image: image
                  }, 'rand delete');
                  rm(image);
                } else {
                  log.info({
                    match: false,
                    "delete": false,
                    image: image
                  }, 'rand keep');
                }
                return process_callback();
              });
            })(image);
          }
        };
        return async.each(image_files, process_image, function(err) {
          return profile_callback(id);
        });
      }
    });
  };

  exports.clear_cache_for_id = clear_cache_for_id;

  exports.clear_cache_from_profile = clear_cache_from_profile;

}).call(this);
